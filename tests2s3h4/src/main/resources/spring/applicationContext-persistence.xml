<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx 
     	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
>

	<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="#{dbProp.driverClass_MySql}" />
		<property name="jdbcUrl" value="#{dbProp.jdbcUrl_MySql}" />
		<property name="user" value="#{dbProp.username_MySql}" />
		<property name="password" value="#{dbProp.password_MySql}" />
		<property name="initialPoolSize" value="#{dbProp.initialPoolSize_MySql}" />
		<property name="maxPoolSize" value="#{dbProp.maxPoolSize_MySql}" />
		<property name="minPoolSize" value="#{dbProp.minPoolSize_MySql}" />
		<property name="acquireIncrement" value="#{dbProp.acquireIncrement_MySql}" />
		<property name="autoCommitOnClose" value="#{dbProp.autoCommitOnClose_MySql}" />
	</bean>
	
	
	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="#{dbProp.jdbcUrl_MySql}" />
		<property name="username" value="#{dbProp.username_MySql}" />
		<property name="password" value="#{dbProp.password_MySql}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> 
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		<property name="validationQuery" value="#{dbProp.validationQuery_MySql}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>
	
	<!-- Hibernate 的 session factory 配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="c3p0DataSource"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">#{dbProp.hibernate_dialect}</prop>
				<prop key="hibernate.show_sql">#{dbProp.hibernate_showSql}</prop>
				<prop key="hibernate.format_sql">#{dbProp.hibernate_formatSql}</prop>
				<prop key="hibernate.use_sql_comments">#{dbProp.hibernate_useSqlComments}</prop>
				<prop key="hibernate.hbm2ddl.auto">#{dbProp.hibernate_hbm2ddlAuto}</prop>
				
				<!-- 配置hibernate的缓存机制的，但demo里没有具体的体现 -->
				<prop key="hibernate.cache.provider_class">#{dbProp.hibernate_cacheProviderClass}</prop>
				<prop key="hibernate.cache.use_query_cache">#{dbProp.hibernate_cacheUseQueryCache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">#{dbProp.hibernate_cacheUseSecondLevelCache}</prop>
			</props>
		</property>
		
		<!-- demo用了hibernate的两种映射配置方式：xml与annotation -->
		<property name="packagesToScan" value="org.oham.learn.ssh.beans" />
		<property name="mappingResources">
			<list>
				<value>org/oham/learn/ssh/beans/TPerson.hbm.xml</value>
			</list>
		</property>
	</bean>

	
	<!-- Mybatis 的 session factory 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="c3p0DataSource" />
		<property name="configLocation" value="classpath:mybatis/sqlmap-config.xml" />
	</bean>

	<!-- 扫描  mapper 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.oham.learn.ssh.sqlmapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- 这个是配置AOP形式的transaction管理，有兴趣的可以放开注释自己玩玩 -->
	<!--
	 handle default transaction management for service - start 
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="update*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="save*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="insert*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="delete*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="handleLink*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="*" read-only="true" propagation="NOT_SUPPORTED"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="txOperationForService"
			expression="execution(* com.hkt.engineering.iris.ws.service.impl..*.*(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="txOperationForService" />
	</aop:config>
	-->
	<!-- handle default transaction management for service - end -->
	
	
	    <!-- Transaction Manager -->
	 <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	 	<!-- 用于Mybatis 的事务配置 -->  
	 	<property name="dataSource" ref="c3p0DataSource"/>
	 	  
	 	<!-- 用于Hibernate 的事务配置 -->  
        <property name="sessionFactory" ref="sessionFactory"/>  
    </bean>  
    
    <!-- 注解形式的transaction管理 -->
	<!-- Transaction Manager Annotation set active-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>
